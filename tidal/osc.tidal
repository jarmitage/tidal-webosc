import Sound.OSC.FD

import Sound.Tidal.Utils

import qualified Data.Aeson as A

killSnd :: (a, b, c) -> (a, c)
killSnd (a,b,c) = (a,c)

instance A.ToJSON Value where
  toJSON (VS s) = A.toJSON s
  toJSON (VF f) = A.toJSON f
  toJSON (VI i) = A.toJSON i

instance A.ToJSON Param where
  toJSON param = A.toJSON (name param)

instance A.ToJSONKey Param

let wrapDirts ds = do x <- openUDP "127.0.0.1" 57121
                      let f (n,d) p = do now <- getNow
                                         sendOSC x $ Message "/vis" [int32 (floor now), int32 (n+1),
                                                                     Blob $
                                                                     Data.ByteString.Lazy.fromStrict $
                                                                     Data.ByteString.Char8.pack $
                                                                     show $
                                                                     A.encode $ A.toJSON $
                                                                     map killSnd $
                                                                     arc p (now+0, now+1)]
                                         d p
                          fs = map f (enumerate ds)
                      return fs

[x1,x2,x3,x4,x5] <- wrapDirts [d1,d2,d3,d4,d5]

x1 $ sound "bd cp lt ht" # gain "0.5 1"